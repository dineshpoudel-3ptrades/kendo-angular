##ABB9FE193598C488E826D885AF77B120##
<abp-page [title]="title | abpLocalization">
  <abp-page-toolbar-container class="col">
    <div class="text-lg-end pt-2">
      <ng-container *ngIf="selectedView === 'List'">
        <button
          class="btn btn-primary btn-sm mx-2"
          type="button"
          [disabled]="service.isExportToExcelBusy"
          (click)="exportToExcel()"
        >
          {{ '::ExportToExcel' | abpLocalization }}
        </button>
      </ng-container>
      <ng-container *ngIf="selectedView === 'List'">
        <button
          *abpPermission="'<%= requiredPolicy %>.Create'"
          class="btn btn-primary btn-sm mx-1"
          type="button"
          (click)="create()"
        >
          <i class="fa fa-plus me-1" aria-hidden="true"></i>
          {{ '<%= resourceName %>::New<%= name %>' | abpLocalization }}
        </button>
      </ng-container>

      <button class="btn btn-secondary btn-sm mx-1" type="button" (click)="viewSelector('List')">
        <i class="fa fa-list me-1" aria-hidden="true"></i>
      </button>
      <button class="btn btn-primary btn-sm mx-1" type="button" (click)="viewSelector('Grid')">
        <i class="fa fa-gear" aria-hidden="true"></i>
      </button>
    </div>
  </abp-page-toolbar-container>

  <div *ngIf="selectedView === 'List'" class="filter-view">
    <div class="filter-bar">
      <% if(hasAdvancedFilterItem) { %> @if (service.filters; as filters) {
      <abp-advanced-entity-filters-form>
        <form #filterForm (keyup.enter)="list.get()">
          <!--<suite-custom-code-block-3>-->
          <!--</suite-custom-code-block-3>-->
          <div class="row">
            <% for (let prop of props) { %> <% if(!prop.isFilterable) { continue; } %>
            <div class="col-12 col-sm-auto">
              <div class="mb-3">
                <% if (prop.formControl === 'text') { %>
                <label class="form-label" for="<%= camel(prop.name) %>Filter">
                  {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                </label>

                <input
                  id="<%= camel(prop.name) %>Filter"
                  class="form-control"
                  [(ngModel)]="filters.<%= camel(prop.name) %>"
                  [ngModelOptions]="{ standalone: true }"
                /><% } else if (prop.formControl === 'checkbox') { %>
                <label class="form-label" for="<%= camel(prop.name) %>Filter">
                  {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                </label>

                <select
                  name="<%= camel(prop.name) %>"
                  id="<%= camel(prop.name) %>Filter"
                  class="form-select form-control"
                  [(ngModel)]="filters.<%= camel(prop.name) %>"
                  [ngModelOptions]="{ standalone: true }"
                  (change)="list.get()"
                >
                  <option [ngValue]=""></option>
                  <option [ngValue]="true">{{ 'AbpUi::Yes' | abpLocalization }}</option>
                  <option [ngValue]="false">{{ 'AbpUi::No' | abpLocalization }}</option></select
                ><% } else if (prop.formControl === 'number') { %>
                <label class="form-label" for="min<%= prop.name %>">
                  {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                </label>

                <input
                  id="min<%= prop.name %>"
                  type="number"
                  class="form-control"
                  [(ngModel)]="filters.<%= camel(prop.name) %>Min"
                  [ngModelOptions]="{ standalone: true }"
                />
              </div>
            </div>

            <div class="col-12 col-sm-auto">
              <div class="mb-3">
                <label class="form-label" for="max<%= prop.name %>">
                  {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                </label>

                <input
                  id="max<%= prop.name %>"
                  type="number"
                  class="form-control"
                  [(ngModel)]="filters.<%= camel(prop.name) %>Max"
                  [ngModelOptions]="{ standalone: true }"
                /><% } else if (prop.formControl === 'date') { %>
                <label class="form-label" for="min<%= prop.name %>">
                  {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                </label>

                <div class="input-group" validationTarget>
                  <input id="min<%= prop.name %>" class="form-control" #min<%="prop.name" % />Input
                  #min<%= prop.name %>Datepicker="ngbDatepicker" name="min<%= prop.name %>"
                  ngbDatepicker container="body" readonly (click)="min<%= prop.name
                  %>Datepicker.toggle()" (keyup.space)="min<%= prop.name %>Datepicker.toggle()"
                  [(ngModel)]="filters.<%= camel(prop.name) %>Min" [ngModelOptions]="{ standalone:
                  true }" /> @if (min<%= prop.name %>Input.value) {
                  <div class="input-group-append">
                    <button
                      class="btn btn-link px-2"
                      type="button"
                      [title]="'AbpUi::Clear' | abpLocalization"
                      (click)="min<%= prop.name %>Datepicker.writeValue(null); min<%= prop.name %>Datepicker.manualDateChange(null, true)"
                    >
                      <i class="fa fa-times" aria-hidden="true"></i>
                    </button>
                  </div>
                  }
                </div>
              </div>
            </div>

            <div class="col-12 col-sm-auto">
              <div class="mb-3">
                <label class="form-label" for="max<%= prop.name %>">
                  {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                </label>

                <div class="input-group" validationTarget>
                  <input id="max<%= prop.name %>" class="form-control" #max<%="prop.name" % />Input
                  #max<%= prop.name %>Datepicker="ngbDatepicker" name="max<%= prop.name %>"
                  ngbDatepicker readonly (click)="max<%= prop.name %>Datepicker.toggle()"
                  (keyup.space)="max<%= prop.name %>Datepicker.toggle()" [(ngModel)]="filters.<%=
                  camel(prop.name) %>Max" [ngModelOptions]="{ standalone: true }" /> @if (max<%=
                  prop.name %>Input.value) {
                  <div class="input-group-append">
                    <button
                      class="btn btn-link px-2"
                      type="button"
                      [title]="'AbpUi::Clear' | abpLocalization"
                      (click)="max<%= prop.name %>Datepicker.writeValue(null); max<%= prop.name %>Datepicker.manualDateChange(null, true)"
                    >
                      <i class="fa fa-times" aria-hidden="true"></i>
                    </button>
                  </div>
                  }
                </div>
                <% } else if (prop.formControl === 'time') { %>
                <label class="form-label" for="min<%= prop.name %>">
                  {{ '<%= resourceName %>::Min<%= prop.name %>' | abpLocalization }}
                </label>

                <ngb-timepicker
                  id="min<%= prop.name %>"
                  name="min<%= prop.name %>"
                  [(ngModel)]="filters.<%= camel(prop.name) %>Min"
                  [ngModelOptions]="{ standalone: true }"
                  [spinners]="false"
                  [meridian]="true"
                />
              </div>
            </div>

            <div class="col-12 col-sm-auto">
              <div class="mb-3">
                <label class="form-label" for="max<%= prop.name %>">
                  {{ '<%= resourceName %>::Max<%= prop.name %>' | abpLocalization }}
                </label>

                <ngb-timepicker
                  id="max<%= prop.name %>"
                  name="max<%= prop.name %>"
                  [(ngModel)]="filters.<%= camel(prop.name) %>Max"
                  [ngModelOptions]="{ standalone: true }"
                  [spinners]="false"
                  [meridian]="true"
                >
                </ngb-timepicker>
                <% } else if (prop.formControl === 'select') { %>
                <label class="form-label" for="<%= camel(prop.name) %>Filter">
                  {{ '<%= resourceName %>::<%= prop.name %>' | abpLocalization }}
                </label>

                <select
                  id="<%= camel(prop.name) %>Filter"
                  class="form-select form-control"
                  [(ngModel)]="filters.<%= camel(prop.name) %>"
                  [ngModelOptions]="{ standalone: true }"
                >
                  <option [ngValue]="null"></option>
                  <option
                    *ngFor="let option of <%= camel(prop.enumType) %>Options; trackBy: track.by('value')"
                    [ngValue]="option.value"
                  >
                    {{ '<%= resourceName %>::Enum:<%= prop.enumType %>.' + option.value |
                    abpLocalization }}
                  </option></select
                ><% } %>
              </div>
            </div>
            <% } for (let prop of navProps.concat(markNavigationConnections(navConnections))) { %>
            <% if(!prop.isFilterable) { continue; } %>
            <div class="col-12 col-sm-auto">
              <div class="mb-3">
                <label class="form-label" for="<%= camel(prop.name) %>Filter">
                  {{ '<%= resourceName %>::<%= prop.entityRef.name %>' | abpLocalization }} </label
                ><% if (prop.formControl === 'lookup.select') { %>
                <abp-lookup-select
                  cid="<%= camel(prop.name) %>Filter"
                  [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                  [(ngModel)]="filters.<%= getLookupName(prop, prop.isNavigationConnection) %>"
                  [ngModelOptions]="{ standalone: true }"
                ></abp-lookup-select
                ><% } else if (prop.formControl === 'lookup.typeahead') { %>
                <abp-lookup-typeahead
                  cid="<%= camel(prop.name) %>Filter"
                  displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                  [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                  [(ngModel)]="filters.<%=  getLookupName(prop, prop.isNavigationConnection) %>"
                  [ngModelOptions]="{ standalone: true }"
                ></abp-lookup-typeahead
                ><% } else if (prop.formControl === 'lookup.modal') { %>
                <abp-lookup-input
                  cid="<%= camel(prop.name) %>Filter"
                  displayNameProp="<%= camel(prop.entityRef.displayProperty) %>"
                  lookupNameProp="displayName"
                  [getFn]="serviceDetail.get<%= prop.entityRef.name %>Lookup"
                  [(ngModel)]="filters.<%=  getLookupName(prop, prop.isNavigationConnection) %>"
                  [ngModelOptions]="{ standalone: true }"
                ></abp-lookup-input
                ><% } %>
              </div>
            </div>
            <% } %>

            <div class="col-12 col-sm-auto align-self-end mb-3">
              <div class="row">
                <div class="col-6 col-sm-auto d-grid">
                  <button type="button" class="btn btn-outline-primary" (click)="clearFilters()">
                    <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>
                  </button>
                </div>
                <div class="col-6 col-sm-auto d-grid">
                  <button type="button" class="btn btn-primary" (click)="list.get()">
                    <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <!--<suite-custom-code-block-4>-->
          <!--</suite-custom-code-block-4>-->
        </form>
      </abp-advanced-entity-filters-form>
      }
    </div>

    <div class="filter-content">
      <app-card-view
        [items]="service.data.items"
        [onEdit]="update.bind(this)"
        [onDelete]="delete.bind(this)"
      ></app-card-view>
    </div>
  </div>

  <div class="card">
    <div *ngIf="selectedView === 'Grid'">
      <default-grid
        [totalCount]="service.data.totalCount"
        [gridData]="service.data.items"
        [gridColumns]="gridColumns"
        [onAdd]="create.bind(this)"
        [editHandler]="update.bind(this)"
        [removeHandler]="delete.bind(this)"
        [list]="list"
        [service]="service"
        [dataStateChange]="dataStateChange"
        [onGridSelect]="gridSelect"
      />
    </div>
  </div>
</abp-page>

@defer (when serviceDetail.isVisible) { @if (serviceDetail.isVisible) { <<%= selector
%>-detail-modal /> } }
